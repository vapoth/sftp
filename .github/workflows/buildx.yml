name: buildx

on:
  schedule:
    - cron: '0 22 * * 4'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout code
        uses: actions/checkout@v3
        
      - name: checkout atmoz sftp code
        uses: actions/checkout@v3
        with:
          repository: atmoz/sftp
          path: atmoz_sftp
          
      - name: Prepare
        id: prepare
        run: |
          DOCKER_IMAGE="${{ secrets.DOCKER_USERNAME }}/sftp"
          DOCKER_PLATFORMS=linux/amd64,linux/arm/v7,linux/arm64
          VERSION=latest
          DOCKER_SCHEDULE_TAGS=""
          if [ "${{ github.event_name }}" = "schedule" ]; then
            DOCKER_SCHEDULE_TAGS="--tag ${DOCKER_IMAGE}:weekly"
          fi
          DOCKER_TAGS="--tag ${DOCKER_IMAGE}:${VERSION}"
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=buildx_args_docker::--platform ${DOCKER_PLATFORMS} \
            --build-arg VERSION=${VERSION} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${GITHUB_SHA::8} \
            ${DOCKER_SCHEDULE_TAGS} \
            ${DOCKER_TAGS} --file ./atmoz_sftp/Dockerfile-alpine .
      - name: install buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: install qemu
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Available platforms
        run: echo ${{ steps.qemu.outputs.platforms }}
      - name: Docker Buildx (build)
        run: |
          docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args_docker }}
      - name: Login to DockerHub
        if: success() && github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Docker Buildx (push) docker.io
        if: success() && github.event_name != 'pull_request'
        run: |
          docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args_docker }}
      - name: Inspect image docker.io
        if: always() && github.event_name != 'pull_request'
        run: |
          docker buildx imagetools inspect ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}
